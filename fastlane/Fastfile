require 'dotenv'
Dotenv.load("../.env")

UI = FastlaneCore::UI unless Fastlane.const_defined?("UI")

default_platform :ios

platform :ios do

  before_all do |lane, options|
    setup_travis
  end

  desc "Run unit/integration tests"
  lane :unit_test do |values|
    scan(
      scheme: "Tests"
    )
  end 

  desc "Run UI tests"
  lane :ui_test do |values|
    # We are running UI test on actual hardware via Firebase test lab. We could run them
    # on a simulator on the CI but that's not as reliable to do. Tests can be flaky. Running
    # on actual hardware *should hopefully* fix some of those issues. 
    # 
    # Details from: https://github.com/fastlane/fastlane-plugin-firebase_test_lab#actions

    # NOTE: This has not been configured! This has not been tested or finished. It' just from the readme of the plugin. 
    scan(
      scheme: 'UITests',                  # XCTest scheme
      clean: true,                        # Recommended: This would ensure the build would not include unnecessary files
      skip_detect_devices: true,          # Required
      build_for_testing: true,            # Required
      sdk: 'iphoneos',                    # Required
      should_zip_build_products: true     # Must be true to set the correct format for Firebase Test Lab
    )
    firebase_test_lab_ios_xctest(
      gcp_project: 'your-google-project', # Your Google Cloud project name
      devices: [                          # Device(s) to run tests on
        {
          ios_model_id: 'iphonex',        # Device model ID, see gcloud command above
          ios_version_id: '11.2',         # iOS version ID, see gcloud command above
          locale: 'en_US',                # Optional: default to en_US if not set
          orientation: 'portrait'         # Optional: default to portrait if not set
        }
      ]
    )
  end 

  # At this time, screenshots are meant to be created on a local machine and the screenshots then uploaded to App Store Connect manually. 
  # This is because (1) if there are errors creating the screenshots, you can fix it on your machine. (2) We manually edit the metadata on 
  # App Store Connect so do this for screenshots, too. 
  # 
  # Requires `brew install imagemagick` for framing to work
  desc "Take screenshots for the store"
  lane :take_screenshots do |values|
    capture_ios_screenshots(
      skip_open_summary: false
    ) 
    frame_screenshots()
  end 

  desc "Downloads dsym files from iTunes Connect (from processed builds by Apple) and uploads them to Crashlytics for reports."  
  lane :refresh_dsyms do |values|
    # get all builds for latest version. This is flexible as it's always "latest" and it gets all builds which means it could get testflight
    download_dsyms(
      version: "latest"
    )

    upload_symbols_to_crashlytics(
      gsp_path: "Src/GoogleService-Info.plist"
    )
  end

  desc "From a .env file, change the app's properties. It's easier to do in fastlane, so that's why we're doing it here."
  lane :set_environment do 
    info_plist_location = "Src/Info.plist"
  
    update_app_identifier(
      app_identifier: ENV["APP_BUNDLE_ID"],
      plist_path: info_plist_location
    )  

    update_info_plist(      
      plist_path: info_plist_location,
      display_name: ENV["APP_NAME"]
    )
  end

  # Note: At this time, this is only meant to be run during pull requests. Make a PR draft if you need. 
  desc "Deploy a QA (testing) build for QA."
  lane :qa_deploy do |values| 
    sync_code_signing()

    # Update version string and build to identify this build in Firebase. 
    commit = last_git_commit    
    short_hash = commit[:abbreviated_commit_hash]

    app_build_number = short_hash
    app_version = git_branch

    set_info_plist_value(path: "./Src/Info.plist", key: "CFBundleVersion", value: app_build_number)
    set_info_plist_value(path: "./Src/Info.plist", key: "CFBundleShortVersionString", value: app_version)    

    build_ios_app(
      scheme: "App",
      configuration: 'Release',
      export_method: 'app-store',
      export_options: {
        provisioningProfiles: { 
          ENV["APP_BUNDLE_ID"] => "match AppStore #{ENV["APP_BUNDLE_ID"]}"
        }
      }
    )

    upload_symbols_to_crashlytics(
      gsp_path: "Src/GoogleService-Info.plist"
    )

    firebase_app_distribution(
      app: ENV["FIREBASE_DISTRIBUTION_APP_ID"],
      debug: true,
      groups: "qa_team" # decided to use hard coded groups. can change later. 
    )    

    pull_request_comment = [
      "App build ready for testing!",
      "",
      "version: #{app_version}, build number: #{app_build_number}"
    ].join("\n") + "\n"

    result = github_api(
      api_token: ENV["GITHUB_TOKEN"],
      http_method: "POST",
      path: "/repos/#{ENV["TRAVIS_REPO_SLUG"]}o/issues/#{ENV["TRAVIS_PULL_REQUEST"]}/comments"
      body: { body: pull_request_comment },
      error_handlers: {
        '*' => proc do |result|
          UI.error("ERROR! Code: #{result[:status]}, body: #{result[:body]}")
        end
      }
    )
  end

  # When we deploy, we only send to TestFlight for public beta testing. 
  # When we want to push to the App Store, we will login to App Store Connect, expire the TestFlight build and submit that same build the the App Store. 
  lane :deploy do |values|
    app_version = values[:new_version]

    set_environment()
    
    sync_code_signing(type: "appstore")

    # Set bundle version to epoch time to assert it's always unique.
    set_info_plist_value(path: "./Src/Info.plist", key: "CFBundleVersion", value: Time.now.to_i.to_s) 
    set_info_plist_value(path: "./Src/Info.plist", key: "CFBundleShortVersionString", value: app_version)

    build_ios_app(
      scheme: "App",
      configuration: 'Release',
      export_method: 'app-store',
      export_options: {
        provisioningProfiles: { 
          ENV["APP_BUNDLE_ID"] => "match AppStore #{ENV["APP_BUNDLE_ID"]}"
        }
      }
    )

    # Only upload builds to testflight and appstore. We will deploy manaually, if we wish. 
    testflight(
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )
    upload_to_app_store(
      skip_metadata: true,
      skip_screenshots: true,
      force: true,
      submit_for_review: false
    )
  end 

end