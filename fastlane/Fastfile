require 'dotenv'
Dotenv.load("../.env")

def get_env(name)
  value = ENV[name]
  raise "Forgot to define #{name} in .env" unless value 

  return value 
end 

env = {
  :bundle_id => get_env("APP_BUNDLE_ID"),
  :admin_email => get_env("ADMIN_EMAIL"),
  :google_services_file_name => get_env("GOOGLE_SERVICES_FILE_NAME"),
  :app_name => get_env("APP_NAME"),
  :source_code_directory => get_env("SOURCE_CODE_DIRECTORY"),
  :testflight_beta_feedback_email => get_env("TESTFLIGHT_BETA_FEEDBACK_EMAIL"),
  :xcode_scheme => get_env("XCODE_SCHEME"),
  :app_icon_file_name => get_env("APP_ICON_FILE_NAME"),
  :app_icon_badge => get_env("APP_ICON_BADGE")
}

default_platform :ios

platform :ios do

  before_all do |lane, options|
    setup_travis
  end
  
  desc "Downloads dsym files from iTunes Connect (from processed builds by Apple) and uploads them to Crashlytics for reports."  
  lane :refresh_dsyms do |values| 
    download_dsyms(
      min_version: values[:min_version],
      version: values[:version] || "latest",
      app_identifier: values[:app_id] || env[:bundle_id]
    )
    upload_symbols_to_crashlytics(
      gsp_path: "GoogleServices/#{env[:google_services_file_name]}" 
    )
    clean_build_artifacts
  end

  desc "From a .env file, change the app's properties. It's easier to do in fastlane, so that's why we're doing it here."
  lane :set_environment do 
    update_info_plist(
      app_identifier: env[:bundle_id],
      plist_path: "#{env[:source_code_directory]}/Info.plist",
      display_name: env[:app_name]
    )
  end

  lane :deploy do |values|
    raise 'Not on CI' unless ENV["CI"]

    generate_icons()

    changelog = File.read("./release_notes.txt")
    latest_demo = File.read('./latest_demo.txt')
    description = File.read("./metadata/en-US/description.txt")
    versionOfApp = get_version_number(target: env[:xcode_scheme])
    buildVersion = Time.now.to_i.to_s
    
    sync_code_signing(type: "appstore")

    set_info_plist_value(path: "./#{env[:source_code_directory]}/Info.plist", key: "CFBundleVersion", value: buildVersion) # Set bundle version to epoch time to assert it's always unique.

    publicity_message = "This update is *not* available to the public. The update was uploaded to the TestFlight app and is only available for beta testing. You can download the update with the TestFlight app on your phone, now."
    if ENV["TRAVIS_TAG"].end_with?("-beta")
      beta_build_release(changelog, description)
    else
      prod_build_release()
      publicity_message = "This update was submitted to the Apple App Store so that it can be availble to the public. However, the app must be approved by Apple for it to be available to the public. This approval process takes between 1 to 4 days."
    end 

    notification_message_body = [      
      "#{env[:app_name]} v#{versionOfApp}, build: #{buildVersion} ready for download.",
      "#{publicity_message}",
      "\n",
      "Link to demo and notes for the latest release:",
      latest_demo,
      "\n",
      "(Note: this is an automated message. Please email #{env[:admin_email]} if you have questions)"
    ].join("\n") + "\n"

    aws_sns_topic(
      access_key: ENV["AWS_IAM_ACCESS_KEY"],
      secret_access_key: ENV["AWS_IAM_ACCESS_SECRET"],
      region: ENV["AWS_REGION"],
      topic_arn: ENV["AWS_SNS_APP_UPDATE_TOPIC"],
      subject: "#{env[:app_name]} v#{versionOfApp} app update",
      message: notification_message_body
    )
  end 

  desc "Build and upload beta app to TestFlight"
  def beta_build_release(changelog, description)
    build_ios_app(
      scheme: env[:xcode_scheme],
      configuration: 'Release',
      export_method: 'app-store',
      output_name: "Prod.ipa",
      output_directory: 'build')

    testflight(
      changelog: changelog,
      beta_app_description: description,
      beta_app_feedback_email: env[:testflight_beta_feedback_email],
      distribute_external: false,
      ipa: './build/Prod.ipa',
      app_platform: 'ios',
      wait_for_uploaded_build: true,
      skip_waiting_for_build_processing: false) # I have decided to not skip waiting for build process because with testflight, skipping will result in changelog and such not being updated and sending app to external testers.
  end

  desc "Build and upload production app to the App Store"
  def prod_build_release
    build_ios_app(
      scheme: env[:xcode_scheme],
      configuration: 'Release',
      export_method: 'app-store',
      output_name: "Prod.ipa",
      output_directory: 'build')
    
    upload_to_app_store(
      ipa: './build/Prod.ipa',
      precheck_default_rule_level: :error) 
  end

  # You must: `brew install graphicsmagick` to install the GraphicsMagick library as required by `appicon` action
  # You must `brew install librsvg` to install RSVG as required by `add_badge` action
  lane :generate_icons do    
    app_icon_path = "./fastlane/icons/#{env[:app_icon_file_name]}"

    appicon(appicon_image_file: app_icon_path,
      appicon_devices: [:ipad, :iphone, :ios_marketing],
      appicon_path: "#{env[:source_code_directory]}/Assets/Assets.xcassets",
      appicon_name: "AppIcon.appiconset")

    badge = env[:app_icon_badge]
    if badge != "no"
      add_badge(
        glob: "/**/AppIcon.appiconset/*.{png,PNG}",
        dark: false, # add a dark badge instead of white one.
        alpha: badge == "alpha", # uses "alpha" text instead of "beta"
        badge_gravity: "SouthEast" # where to position the badge 
      )
    end
  end
end